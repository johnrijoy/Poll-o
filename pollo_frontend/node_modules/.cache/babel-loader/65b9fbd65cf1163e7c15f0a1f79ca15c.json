{"ast":null,"code":"import axios from 'axios';\n\nconst getState = ({\n  getStore,\n  getActions,\n  setStore\n}) => {\n  return {\n    store: {\n      message: null,\n      token: null,\n      test: 'store working'\n    },\n    actions: {\n      getTest: () => {\n        console.log('actions working');\n      },\n      syncTokenFromSessionStorage: () => {\n        const token = sessionStorage.getItem(\"token\");\n        console.log(\"refreshin, syncing tokens\");\n        if (token && token != \"\" && token != undefined) setStore({\n          token: token\n        });\n      },\n      login: async (email, password) => {\n        console.log('logging in');\n        const opts = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            password: password\n          })\n        };\n\n        try {\n          const resp = await axios(process.env.REACT_APP_API_SERVER + \"/api/auth/create-token\", opts); //console.log(resp.status, resp.data.access_token);\n\n          if (resp.status !== 200) {\n            console.log(\"Error 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          sessionStorage.setItem(\"token\", data.access_token);\n          setStore({\n            \"token\": data.access_token\n          });\n          return true;\n        } catch (error) {\n          console.error(\"Error 2\", error);\n          throw error;\n        }\n      },\n      register: async (email, name, password) => {\n        console.log('Registering User');\n        const opts = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            name: name,\n            password: password\n          })\n        };\n\n        try {\n          const resp = await axios(process.env.REACT_APP_API_SERVER + \"/api/auth/create-user\", opts); //console.log(resp.status, resp.data.access_token);\n\n          if (resp.status !== 200) {\n            console.log(\"Error create-user 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        } catch (error) {\n          console.error(\"Error creat-user 2\", error);\n          throw error;\n        }\n      },\n      logout: () => {\n        sessionStorage.removeItem(\"token\");\n        setStore({\n          token: null\n        });\n      },\n      create_post: async polldata => {\n        console.log('Creating Post');\n        const opts = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          data: JSON.stringify(polldata)\n        };\n\n        try {\n          const resp = await axios(process.env.REACT_APP_API_SERVER + \"/api/polls/createpost\", opts); //console.log(resp.status, resp.data.access_token);\n\n          if (resp.status !== 200) {\n            console.log(\"Error create-user 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        } catch (error) {\n          console.error(\"Error creat-user 2\", error);\n          throw error;\n        }\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["/home/johnrijoy/projects/polling-webapp/pollo_frontend/src/context/contextData.js"],"names":["axios","getState","getStore","getActions","setStore","store","message","token","test","actions","getTest","console","log","syncTokenFromSessionStorage","sessionStorage","getItem","undefined","login","email","password","opts","method","headers","data","JSON","stringify","resp","process","env","REACT_APP_API_SERVER","status","setItem","access_token","error","register","name","logout","removeItem","create_post","polldata"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst getState = ({ getStore, getActions, setStore }) => {\n  return {\n    store:{\n      message: null,\n      token: null,\n      test: 'store working'\n    },\n    actions:{\n\n      getTest: ()=>{\n        console.log('actions working')\n      },\n\n      syncTokenFromSessionStorage:()=>{\n        const token = sessionStorage.getItem(\"token\");\n        console.log(\"refreshin, syncing tokens\")\n        if (token && token != \"\" && token != undefined ) setStore({token: token});\n      },\n\n      login: async (email, password)=>{\n        console.log('logging in');\n\n        const opts={\n          method: \"POST\",\n          headers: {\n            \"Content-Type\":\"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            password: password\n          })\n        };\n\n        try{\n          const resp = await axios(process.env.REACT_APP_API_SERVER+\"/api/auth/create-token\", opts);\n          //console.log(resp.status, resp.data.access_token);\n          if (resp.status !== 200){\n            console.log(\"Error 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          sessionStorage.setItem(\"token\", data.access_token);\n          setStore({ \"token\": data.access_token });\n          return true;\n        }\n        catch(error){\n          console.error(\"Error 2\", error);\n          throw error;\n        }\n      },\n\n      register: async (email, name, password)=>{\n        console.log('Registering User');\n\n        const opts={\n          method: \"POST\",\n          headers: {\n            \"Content-Type\":\"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            name: name,\n            password: password\n          })\n        };\n\n        try{\n          const resp = await axios(process.env.REACT_APP_API_SERVER+\"/api/auth/create-user\", opts);\n          //console.log(resp.status, resp.data.access_token);\n          if (resp.status !== 200){\n            console.log(\"Error create-user 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        }\n        catch(error){\n          console.error(\"Error creat-user 2\", error);\n          throw error;\n        }\n      },\n\n      logout: ()=>{\n        sessionStorage.removeItem(\"token\");\n        setStore({ token: null })\n      },\n      \n      create_post: async (polldata)=>{\n        console.log('Creating Post');\n\n        const opts={\n          method: \"POST\",\n          headers: {\n            \"Content-Type\":\"application/json\"\n          },\n          data: JSON.stringify(polldata)\n        };\n\n        try{\n          const resp = await axios(process.env.REACT_APP_API_SERVER+\"/api/polls/createpost\", opts);\n          //console.log(resp.status, resp.data.access_token);\n          if (resp.status !== 200){\n            console.log(\"Error create-user 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        }\n        catch(error){\n          console.error(\"Error creat-user 2\", error);\n          throw error;\n        }\n      }\n\n\n    }\n  };\n};\n\nexport default getState;\n"]},"metadata":{},"sourceType":"module"}