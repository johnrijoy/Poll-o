{"ast":null,"code":"import axios from 'axios';\n\nconst getState = ({\n  getStore,\n  getActions,\n  setStore\n}) => {\n  return {\n    store: {\n      message: null,\n      token: null,\n      isAuthenticated: false,\n      user: null,\n      test: 'store working'\n    },\n    actions: {\n      getTest: () => {\n        console.log('actions working');\n      },\n      syncTokenFromSessionStorage: () => {\n        const token = sessionStorage.getItem(\"token\");\n        console.log(\"refreshin, syncing tokens\");\n        if (token && token != \"\" && token != undefined) setStore({\n          token: token,\n          \"isAuthenticated\": true\n        });\n      },\n      login: async (email, password) => {\n        console.log('logging in');\n        const opts = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            password: password\n          })\n        };\n\n        try {\n          const resp = await axios(process.env.REACT_APP_API_SERVER + \"/api/auth/create-token\", opts); //console.log(resp.status, resp.data.access_token);\n\n          if (resp.status !== 200) {\n            console.log(\"Error 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          sessionStorage.setItem(\"token\", data.access_token);\n          setStore({\n            \"token\": data.access_token\n          });\n          setStore({\n            \"isAuthenticated\": true\n          });\n          getActions().getuser();\n          return true;\n        } catch (error) {\n          console.error(\"Error 2\", error);\n          throw error;\n        }\n      },\n      register: async (email, name, password) => {\n        console.log('Registering User');\n        const opts = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            name: name,\n            password: password\n          })\n        };\n\n        try {\n          const resp = await axios(process.env.REACT_APP_API_SERVER + \"/api/auth/create-user\", opts); //console.log(resp.status, resp.data.access_token);\n\n          if (resp.status !== 200) {\n            console.log(\"Error create-user 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        } catch (error) {\n          console.error(\"Error creat-user 2\", error);\n          throw error;\n        }\n      },\n      logout: () => {\n        sessionStorage.removeItem(\"token\");\n        setStore({\n          token: null\n        });\n        setStore({\n          isAuthenticated: false\n        });\n        console.log(\"tokens removed, logged out\");\n      },\n      getuser: () => {\n        console.log('getting user details');\n        const store = getStore();\n        const opts = {\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": \"Bearer \" + store.token\n          }\n        };\n        axios(process.env.REACT_APP_API_SERVER + \"/api/auth/userdata\", opts).then(resp => {\n          if (resp.status == 200) {\n            console.log(resp.data);\n            setStore({\n              user: resp.data\n            });\n          }\n        }).catch(console.log('error in axios request'));\n      },\n      create_post: async polldata => {\n        console.log('Creating Post', polldata);\n        const store = getStore();\n        console.log(store);\n        const apidata = {\n          'question': polldata.question,\n          'options': polldata.options\n        };\n        const opts = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + store.token\n          },\n          data: JSON.stringify(apidata)\n        };\n\n        try {\n          const resp = await axios(process.env.REACT_APP_API_SERVER + \"/api/polls/createpoll\", opts); //console.log(resp.status, resp.data.access_token);\n\n          if (resp.status !== 200) {\n            console.log(\"Error create_post 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        } catch (error) {\n          console.error(\"Error create_post 2\", error.code);\n          return false;\n        }\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["/home/johnrijoy/projects/polling-webapp/pollo_frontend/src/context/contextData.js"],"names":["axios","getState","getStore","getActions","setStore","store","message","token","isAuthenticated","user","test","actions","getTest","console","log","syncTokenFromSessionStorage","sessionStorage","getItem","undefined","login","email","password","opts","method","headers","data","JSON","stringify","resp","process","env","REACT_APP_API_SERVER","status","setItem","access_token","getuser","error","register","name","logout","removeItem","then","catch","create_post","polldata","apidata","question","options","code"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst getState = ({ getStore, getActions, setStore }) => {\n  return {\n    store:{\n      message: null,\n      token: null,\n      isAuthenticated: false,\n      user: null,\n      test: 'store working'\n    },\n    actions:{\n\n      getTest: ()=>{\n        console.log('actions working')\n      },\n\n      syncTokenFromSessionStorage:()=>{\n        const token = sessionStorage.getItem(\"token\");\n        console.log(\"refreshin, syncing tokens\")\n        if (token && token != \"\" && token != undefined ) setStore({\n          token: token,\n          \"isAuthenticated\": true\n        });\n      },\n\n      login: async (email, password)=>{\n        console.log('logging in');\n\n        const opts={\n          method: \"POST\",\n          headers: {\n            \"Content-Type\":\"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            password: password\n          })\n        };\n\n        try{\n          const resp = await axios(process.env.REACT_APP_API_SERVER+\"/api/auth/create-token\", opts);\n          //console.log(resp.status, resp.data.access_token);\n          if (resp.status !== 200){\n            console.log(\"Error 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          sessionStorage.setItem(\"token\", data.access_token);\n          setStore({ \"token\": data.access_token });\n          setStore({\"isAuthenticated\" :true });\n          getActions().getuser();\n          return true;\n        }\n        catch(error){\n          console.error(\"Error 2\", error);\n          throw error;\n        }\n      },\n\n      register: async (email, name, password)=>{\n        console.log('Registering User');\n\n        const opts={\n          method: \"POST\",\n          headers: {\n            \"Content-Type\":\"application/json\"\n          },\n          data: JSON.stringify({\n            email: email,\n            name: name,\n            password: password\n          })\n        };\n\n        try{\n          const resp = await axios(process.env.REACT_APP_API_SERVER+\"/api/auth/create-user\", opts);\n          //console.log(resp.status, resp.data.access_token);\n          if (resp.status !== 200){\n            console.log(\"Error create-user 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        }\n        catch(error){\n          console.error(\"Error creat-user 2\", error);\n          throw error;\n        }\n      },\n\n      logout: ()=>{\n        sessionStorage.removeItem(\"token\");\n        setStore({ token: null });\n        setStore({isAuthenticated : false });\n        console.log(\"tokens removed, logged out\")\n      },\n\n      getuser: ()=>{\n        console.log('getting user details');\n        const store = getStore()\n        const opts={\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": \"Bearer \"+ store.token \n          }\n        }\n       \n        axios(process.env.REACT_APP_API_SERVER+\"/api/auth/userdata\", opts)\n          .then((resp)=>{\n            if (resp.status == 200){\n              console.log(resp.data);\n              setStore({user: resp.data});\n            }\n\n          }).catch(\n            console.log('error in axios request')\n          )\n\n      },\n      \n      create_post: async (polldata)=>{\n        console.log('Creating Post', polldata);\n        const store = getStore()\n        console.log(store);        \n        const apidata = {\n          'question':polldata.question,\n          'options':polldata.options\n        };\n        const opts={\n          method: \"POST\",\n          headers: {\n            \"Content-Type\":\"application/json\",\n            \"Authorization\": \"Bearer \"+ store.token \n          },\n          data: JSON.stringify(apidata)\n        };\n\n        try{\n          const resp = await axios(process.env.REACT_APP_API_SERVER+\"/api/polls/createpoll\", opts);\n          //console.log(resp.status, resp.data.access_token);\n          if (resp.status !== 200){\n            console.log(\"Error create_post 1\");\n            return false;\n          }\n\n          const data = await resp.data;\n          console.log(\"Backend data:\", data);\n          return true;\n        }\n        catch(error){\n          console.error(\"Error create_post 2\", error.code);\n          return false;\n        }\n      }\n\n\n    }\n  };\n};\n\nexport default getState;\n"]},"metadata":{},"sourceType":"module"}