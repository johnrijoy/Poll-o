{"ast":null,"code":"var _jsxFileName = \"/home/johnrijoy/projects/polling-webapp/pollo_frontend/src/components/MyPolls.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { Context } from '../context/appContext';\nimport { Row } from 'react-bootstrap';\nimport Pollcard from './Pollcard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyPolls = props => {\n  _s();\n\n  const [polls, setPolls] = useState(null);\n  const token = useContext(Context).store.token;\n  useEffect(() => {\n    axios.get(process.env.REACT_APP_API_SERVER + \"/api/polls/mypoll\", {\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(resp => {\n      console.log(resp.data);\n      setPolls(resp.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: polls ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        lg: 3,\n        className: \"g-4\",\n        children: polls.polls.map(poll => /*#__PURE__*/_jsxDEV(Pollcard, {\n          polldata: poll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MyPolls, \"wZZHILDEvdln501igM5qkuKEz0o=\");\n\n_c = MyPolls;\nexport default MyPolls;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPolls\");","map":{"version":3,"sources":["/home/johnrijoy/projects/polling-webapp/pollo_frontend/src/components/MyPolls.js"],"names":["React","useState","useContext","useEffect","axios","Context","Row","Pollcard","MyPolls","props","polls","setPolls","token","store","get","process","env","REACT_APP_API_SERVER","headers","then","resp","console","log","data","catch","error","map","poll"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AAEA,SACEC,GADF,QAEO,iBAFP;AAIA,OAAOC,QAAP,MAAqB,YAArB;;;;AAEA,MAAMC,OAAO,GAAGC,KAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMW,KAAK,GAAGV,UAAU,CAACG,OAAD,CAAV,CAAoBQ,KAApB,CAA0BD,KAAxC;AAEAT,EAAAA,SAAS,CAAC,MAAI;AAEZC,IAAAA,KAAK,CAACU,GAAN,CAAUC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,GAAmC,mBAA7C,EACE;AAACC,MAAAA,OAAO,EACN;AAAC,kBAAU,kBAAX;AACE,yBAAiB,YAAWN;AAD9B;AADF,KADF,EAKEO,IALF,CAKQC,IAAD,IAAQ;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,IAAjB;AACAZ,MAAAA,QAAQ,CAACS,IAAI,CAACG,IAAN,CAAR;AACD,KARH,EASEC,KATF,CASSC,KAAD,IAAU;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD,KAXH;AAcD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACE;AAAA,cACEf,KAAD,gBACC;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,EAAE,EAAE,CAAhB;AAAmB,QAAA,EAAE,EAAE,CAAvB;AAA2B,QAAA,SAAS,EAAC,KAArC;AAAA,kBACCA,KAAK,CAACA,KAAN,CAAYgB,GAAZ,CAAiBC,IAAD,iBACf,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,gBADD;AADD;AAAA;AAAA;AAAA;AAAA;AADF,qBADD,gBASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVF,mBADF;AAgBD,CAtCD;;GAAMnB,O;;KAAAA,O;AAuCN,eAAeA,OAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { Context } from '../context/appContext';\n\nimport {\n  Row\n} from 'react-bootstrap';\n\nimport Pollcard from './Pollcard';\n\nconst MyPolls =(props)=>{\n  const [polls, setPolls] = useState(null);\n  const token = useContext(Context).store.token;\n\n  useEffect(()=>{\n\n    axios.get(process.env.REACT_APP_API_SERVER + \"/api/polls/mypoll\",\n      {headers: \n        {'Accept': 'application/json', \n          'Authorization': 'Bearer '+ token}\n      }\n    ).then((resp)=>{\n        console.log(resp.data);\n        setPolls(resp.data);\n      }\n    ).catch((error) =>{\n        console.log(error);\n      }\n    );\n\n  }, []);\n\n  return (\n    <>\n    {(polls) ?(\n      <>\n        <Row xs={1} md={2} lg={3}  className=\"g-4\">\n        {polls.polls.map((poll)=>(\n          <Pollcard polldata={poll}/>\n         ))}\n         </Row>\n      </>\n    ):(\n      <p>Loading</p>\n    )}\n    </>\n  )\n  \n}\nexport default MyPolls;\n"]},"metadata":{},"sourceType":"module"}