{"ast":null,"code":"var _jsxFileName = \"/home/johnrijoy/projects/polling-webapp/pollo_frontend/src/components/Pollform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { Context } from '../context/appContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Pollform = props => {\n  _s();\n\n  const store = useContext(Context).store;\n  const history = useHistory();\n  const [option, setOption] = useState({\n    poll_id: props.poll.polldata.poll_id\n  });\n\n  const handleRadio = event => {\n    setOption({ ...option,\n      option_id: event.target.value\n    });\n    console.log('option set as:', event.target.value, props.poll.polloptions[event.target.value]);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const vote = option;\n    const opts = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + store.token\n      },\n      data: JSON.stringify(vote)\n    };\n    console.log(opts);\n    axios(process.env.REACT_APP_API_SERVER + \"/api/polls/votepoll\", opts).then(resp => {\n      if (resp.status === 200) console.log('voted successfully');\n      if (resp.status === 400) console.log('already voted');\n      history.go(0);\n    }).catch(error => console.error('caught error', error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.poll.polldata.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        onChange: handleRadio,\n        children: Object.entries(props.poll.polloptions).map((key, i) => /*#__PURE__*/_jsxDEV(Form.Check, {\n          name: \"option\",\n          type: \"radio\",\n          label: key[1],\n          value: key[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(Pollform, \"riHWT+z582II+iE8U/vfasmIwjA=\", false, function () {\n  return [useHistory];\n});\n\n_c = Pollform;\nexport default Pollform;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pollform\");","map":{"version":3,"sources":["/home/johnrijoy/projects/polling-webapp/pollo_frontend/src/components/Pollform.js"],"names":["React","useState","useContext","axios","useHistory","Form","Button","Context","Pollform","props","store","history","option","setOption","poll_id","poll","polldata","handleRadio","event","option_id","target","value","console","log","polloptions","handleSubmit","e","preventDefault","vote","opts","method","headers","token","data","JSON","stringify","process","env","REACT_APP_API_SERVER","then","resp","status","go","catch","error","question","Object","entries","map","key","i"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  Form,\n  Button\n} from 'react-bootstrap';\n\nimport { Context } from '../context/appContext';\n\nconst Pollform = (props) => {\n  const store = useContext(Context).store;\n  const history = useHistory();\n  const [ option, setOption ] = useState({\n    poll_id: props.poll.polldata.poll_id\n  });\n  \n  const handleRadio = (event) => {\n    setOption({...option, option_id : event.target.value});\n    console.log('option set as:', event.target.value, props.poll.polloptions[event.target.value]);\n  };\n\n  const handleSubmit = (e)=>{\n    e.preventDefault();\n    const vote = option;\n    const opts={\n      method: \"POST\",\n      headers: {\n        \"Content-Type\":\"application/json\",\n        \"Authorization\": \"Bearer \"+ store.token\n      },\n      data: JSON.stringify(vote)\n    };\n\n    console.log(opts);\n    axios(process.env.REACT_APP_API_SERVER+\"/api/polls/votepoll\", opts)\n      .then((resp)=>{\n        if (resp.status === 200)\n          console.log('voted successfully');\n        if (resp.status === 400)\n          console.log('already voted');\n\n        history.go(0);\n      }).catch((error)=>\n        console.error('caught error', error)\n      )\n    \n\n  }\n\n  return (\n    <>\n    <Form onSubmit={handleSubmit}>\n      <h1>{props.poll.polldata.question}</h1>\n      <Form.Group onChange={handleRadio}>\n      {Object.entries(props.poll.polloptions).map((key, i)=>\n                (\n                  <Form.Check\n                    name=\"option\"\n                    type=\"radio\"\n                    label={key[1]}\n                    value={key[0]}\n                  />\n                )\n        ) \n      }\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n    </>\n  )\n}\n\nexport default Pollform;\n"]},"metadata":{},"sourceType":"module"}